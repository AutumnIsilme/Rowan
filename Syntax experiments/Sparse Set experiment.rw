struct SparseSet {
    capacity : u32 = ---;
    max_val : s32 = ---;
    n : s32;
    sparse : s32[] = ---; //indexes
    dense  : s32[] = ---; //Data
}

/*
typedef struct _SparseSet {
    uint32 capacity;
    int32 max_val;
    int32 n;
    uint64 __l_sparse;
    uint64 __l_dense;
    int32[] data;
} SparseSet;
inline int _SparseSet_get_sparse(SparseSet *d, int n, int *out) {
    if (n < 0 || n >= d->__l_sparse) {
        return 1;
    }
    *out = d->data[n];
    return 0;
}
inline int _SparseSet_get_dense(SparseSet *d, int n, int *out) {
    if (n < 0 || n >= d->__l_dense) {
        return 1;
    }
    *out = d->data[d->__l_sparse + n];
    return 0;
}
*/


sparse_set_create : (max_val: s32, cap: u32) -> (^SparseSet) {
    return alloc SparseSet {
        sparse[max_val+1], 
        dense[cap]
    }
    //sparse = alloc [max_val+1]int;
    //dense = alloc [cap]int;
}

foo : () -> (^^SparseSet) {
    return alloc SparseSet{sparse[5], dense[52]}[5]; //Allocate an array of 5 sparse sets where the length of 
}

sparse_set_search : (using set: ^SparseSet, x: s32) {
    if x > max_val {
        return -1;
    }

    if sparse[x] < n && dense[sparse[x]] == x {
        return (sparse[x]);
    }

    return -1;
}

sparse_set_insert : (using set: ^SparseSet, x: s32) {

}

limited_pointer Component;
limited_pointer FunctionalityComponent; //Not engine type, user defined for some purpose in whatever they are doing
//Limited pointers are similar to empty interfaces in Java, allowing a reference to an object of unknown type to be
//a member of a limited set of types rather than just a void*.
//Runtime type information allows the referencer to find what type the pointer actually points to and take action based
//on this.

Sittable : struct #limited_pointer_add(Component, FunctionalityComponent) {
    occupied : bool;
    currently_interactable : bool;
    sit_height : f32;
}

struct Sittable is (Component, FunctionalityComponent) {
    occupied : bool;
    currently_interactable : bool;
    sit_height : f32;
}

bar : (component: ^Component) -> () {
    if component.type == Sittable {
        do_sittable_stuff(cast(Sittable, component));
    }

    sparse_set_create(ENTITY_MAX, ENTITY_MAX)
}
