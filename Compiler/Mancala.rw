using import libc.stdio
import libc.stdlib

struct game_state {
    using board_union: union {
        using arrays: struct {
            ends: int[2]
            board: int[12]
        }
        board_state: board_state
    }
    current_player: int
    done: bool
}

struct board_state {
    end_p1, end_p2: int
    using _1: struct { l, k, j, i, h, g: int }
    using _2: struct { a, b, c, d, e, f: int }
}

INITIAL_BOARD_STATE: const board_state = {
    0, 0,
    {4, 4, 4, 4, 4, 4},
    {4, 4, 4, 4, 4, 4}
}

opposite: const int[12] = {
    11, 10, 9, 8, 7, 6,
     5,  4, 3, 2, 1, 0
}

player_names: const string[2] = {
    "Player 1",
    "Player 2"
}

player_range: const string[2] = {
    "A-F",
    "G-L"
}

print_board: (board: board_state^) -> void {
    printf(
        "      L  K  J  I  H  G\n"
        "%2d    %02d %02d %02d %02d %02d %02d\n"
        "      %02d %02d %02d %02d %02d %02d    %2d\n"
        "      A  B  C  D  E  F\n",
        board.end_p2, board.l, board.k, board.j, board.i, board.h, board.g,
        board.a, board.b, board.c, board.d, board.e, board.f, board.end_p1
    )
}

player_index_to_board_index: (index: int, s: game_state^) -> int {
    if !current_player {
        if index == 6 {
            return -1
        } else if index > 6 && index <= 12 {
            return index - 1
        } else if 0 <= index && index < 6 {
            return index
        } else {
            return 12
        }
    } else {
        if index == 12 {
            return -1
        } else if 0 <= index && index < 12 {
            return index
        }
    }
    return 12
}

handle_turn: (using s: game_state^, index: int) -> bool {
    val := board[index]
    board[index] = 0
    for (i := 0 i < val i++) {
        index++
        if index > 12 { index = 0 }
        if (p_index := player_index_to_board_index(index, s)) >= 0 {
            board[p_index] += 1
        } else {
            ends[current_player] += 1
        }
    }
    last := player_index_to_board_index(index, s)
    do_again := false
    if last == -1 {
        do_again = true
    } else if board[last] == 1 && board[opposite[last]] {
        ends[current_player] += board[opposite[last]] + 1
        board[opposite[last]] = 0
        board[last] = 0
    }
    if !current_player && (board[0] + board[1] + board[2] + board[3] + board[4] + board[5] == 0) {
        ends[!current_player] += board[6] + board[7] + board[8] + board[9] + board[10] + board[11]
        for (int i = 0 i < 12 i++) {
            board[i] = 0
        }
        done = true
    } else if current_player && (board[6] + board[7] + board[8] + board[9] + board[10] + board[11] == 0) {
        ends[!current_player] += board[0] + board[1] + board[2] + board[3] + board[4] + board[5]
        for (int i = 0 i < 12 i++) {
            board[i] = 0
        }
        done = true
    }
    if !do_again {
        current_player = !current_player
    }
    return do_again
}

main() -> int {
    using s: game_state
    board_state = INITIAL_BOARD_STATE
    end_p1 = 0
    end_p2 = 0
    current_player = 0
    done = 0
    line: char^ = libc.stdlib.malloc(2);
    cap: u64 = 2;
    index: int
    while !done {
        print_board(board, ends)
        printf("%s:\n", player_names[current_player])
        char c = 0
        while (('A' > c || 'L' < c) && ('a' > c || 'l' < c)) {
            printf("Enter your choice (%s): ", player_range[current_player])
            if (getline(^line, ^cap, stdin) == 2) {
                c = line[0];
            } else {
                printf("Please enter a single character indicating your choice.\n");
            }
            if 'a' <= c && 'l' >= c { c += 'A' - 'a' }
            index = c - 'A'
            if (current_player && index < 6) || (!current_player && index > 5) {
                printf("That is not on your side of the board.\n")
                c = 0
            }
            if board[index] == 0 {
                printf("You must choose a slot with bead\n")
                c = 0
            }
        }
        handle_turn(&s, index)
    }
    print_board(board, ends)
    if ends[0] == ends[1] {
        printf("Draw!\n")
    } else if ends[0] > ends[1] {
        printf("Player 1 wins!\n")
    } else {
        printf("Player 2 wins!\n")
    }
}
